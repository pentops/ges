// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: o5/ges/v1/topic/events.p.j5s.proto

package ges_tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ReplayTopic_Events_FullMethodName  = "/o5.ges.v1.topic.ReplayTopic/Events"
	ReplayTopic_Upserts_FullMethodName = "/o5.ges.v1.topic.ReplayTopic/Upserts"
	ReplayTopic_Generic_FullMethodName = "/o5.ges.v1.topic.ReplayTopic/Generic"
)

// ReplayTopicClient is the client API for ReplayTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplayTopicClient interface {
	Events(ctx context.Context, in *EventsMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Upserts(ctx context.Context, in *UpsertsMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Generic(ctx context.Context, in *GenericMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type replayTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewReplayTopicClient(cc grpc.ClientConnInterface) ReplayTopicClient {
	return &replayTopicClient{cc}
}

func (c *replayTopicClient) Events(ctx context.Context, in *EventsMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReplayTopic_Events_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayTopicClient) Upserts(ctx context.Context, in *UpsertsMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReplayTopic_Upserts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replayTopicClient) Generic(ctx context.Context, in *GenericMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReplayTopic_Generic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplayTopicServer is the server API for ReplayTopic service.
// All implementations must embed UnimplementedReplayTopicServer
// for forward compatibility
type ReplayTopicServer interface {
	Events(context.Context, *EventsMessage) (*emptypb.Empty, error)
	Upserts(context.Context, *UpsertsMessage) (*emptypb.Empty, error)
	Generic(context.Context, *GenericMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedReplayTopicServer()
}

// UnimplementedReplayTopicServer must be embedded to have forward compatible implementations.
type UnimplementedReplayTopicServer struct {
}

func (UnimplementedReplayTopicServer) Events(context.Context, *EventsMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedReplayTopicServer) Upserts(context.Context, *UpsertsMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upserts not implemented")
}
func (UnimplementedReplayTopicServer) Generic(context.Context, *GenericMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generic not implemented")
}
func (UnimplementedReplayTopicServer) mustEmbedUnimplementedReplayTopicServer() {}

// UnsafeReplayTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplayTopicServer will
// result in compilation errors.
type UnsafeReplayTopicServer interface {
	mustEmbedUnimplementedReplayTopicServer()
}

func RegisterReplayTopicServer(s grpc.ServiceRegistrar, srv ReplayTopicServer) {
	s.RegisterService(&ReplayTopic_ServiceDesc, srv)
}

func _ReplayTopic_Events_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayTopicServer).Events(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplayTopic_Events_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayTopicServer).Events(ctx, req.(*EventsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplayTopic_Upserts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayTopicServer).Upserts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplayTopic_Upserts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayTopicServer).Upserts(ctx, req.(*UpsertsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplayTopic_Generic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplayTopicServer).Generic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplayTopic_Generic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplayTopicServer).Generic(ctx, req.(*GenericMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplayTopic_ServiceDesc is the grpc.ServiceDesc for ReplayTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplayTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.ges.v1.topic.ReplayTopic",
	HandlerType: (*ReplayTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Events",
			Handler:    _ReplayTopic_Events_Handler,
		},
		{
			MethodName: "Upserts",
			Handler:    _ReplayTopic_Upserts_Handler,
		},
		{
			MethodName: "Generic",
			Handler:    _ReplayTopic_Generic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/ges/v1/topic/events.p.j5s.proto",
}
