// Code generated by protoc-gen-go-o5-messaging. DO NOT EDIT.
// versions:
// - protoc-gen-go-o5-messaging 0.0.0
// source: o5/ges/v1/topic/events.p.j5s.proto

package ges_tpb

import (
	context "context"
	o5msg "github.com/pentops/o5-messaging/o5msg"
)

// Service: ReplayTopic
// Method: Events

func (msg *EventsMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.ges.v1.topic.ReplayTopic",
		GrpcMethod:       "Events",
		Headers:          map[string]string{},
		DestinationTopic: "replay",
	}
	return header
}

// Method: Upserts

func (msg *UpsertsMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.ges.v1.topic.ReplayTopic",
		GrpcMethod:       "Upserts",
		Headers:          map[string]string{},
		DestinationTopic: "replay",
	}
	return header
}

// Method: Generic

func (msg *GenericMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.ges.v1.topic.ReplayTopic",
		GrpcMethod:       "Generic",
		Headers:          map[string]string{},
		DestinationTopic: "replay",
	}
	return header
}

type ReplayTopicTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewReplayTopicTxSender[C any](sender o5msg.TxSender[C]) *ReplayTopicTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "o5.ges.v1.topic.ReplayTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Events",
				Message: (*EventsMessage).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "Upserts",
				Message: (*UpsertsMessage).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "Generic",
				Message: (*GenericMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &ReplayTopicTxSender[C]{sender: sender}
}

type ReplayTopicCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewReplayTopicCollector[C any](collector o5msg.Collector[C]) *ReplayTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "o5.ges.v1.topic.ReplayTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Events",
				Message: (*EventsMessage).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "Upserts",
				Message: (*UpsertsMessage).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "Generic",
				Message: (*GenericMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &ReplayTopicCollector[C]{collector: collector}
}

type ReplayTopicPublisher struct {
	publisher o5msg.Publisher
}

func NewReplayTopicPublisher(publisher o5msg.Publisher) *ReplayTopicPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "o5.ges.v1.topic.ReplayTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Events",
				Message: (*EventsMessage).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "Upserts",
				Message: (*UpsertsMessage).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "Generic",
				Message: (*GenericMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &ReplayTopicPublisher{publisher: publisher}
}

// Method: Events

func (send ReplayTopicTxSender[C]) Events(ctx context.Context, sendContext C, msg *EventsMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect ReplayTopicCollector[C]) Events(sendContext C, msg *EventsMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish ReplayTopicPublisher) Events(ctx context.Context, msg *EventsMessage) error {
	return publish.publisher.Publish(ctx, msg)
}

// Method: Upserts

func (send ReplayTopicTxSender[C]) Upserts(ctx context.Context, sendContext C, msg *UpsertsMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect ReplayTopicCollector[C]) Upserts(sendContext C, msg *UpsertsMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish ReplayTopicPublisher) Upserts(ctx context.Context, msg *UpsertsMessage) error {
	return publish.publisher.Publish(ctx, msg)
}

// Method: Generic

func (send ReplayTopicTxSender[C]) Generic(ctx context.Context, sendContext C, msg *GenericMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect ReplayTopicCollector[C]) Generic(sendContext C, msg *GenericMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish ReplayTopicPublisher) Generic(ctx context.Context, msg *GenericMessage) error {
	return publish.publisher.Publish(ctx, msg)
}
